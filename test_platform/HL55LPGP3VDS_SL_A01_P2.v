//****************************************************************************//
// Verilog models generated by SiliconSmart L-2016.06-SP1-1                   //
//                                                                            //
// Host Name: h1ds08, User Name: zhangli2, PID: 5912                          //
//                                                                            //
//                                                                            //
// File generated on Fri Mar 09 20:07:00 CST 2018. (SMSC-3)                   //
//****************************************************************************//


`timescale 1ns/1ps



`celldefine
module HPB3A( PAD );
inout PAD;
endmodule
`endcelldefine


`celldefine
module HPB3AC( PAD );
inout PAD;
endmodule
`endcelldefine


`celldefine
module HPDWUW0204DGP( I, OE, DS, IE, C, PE, PS, PAD);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

    //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify



endmodule
`endcelldefine


`celldefine
module HPDWUW0204SDGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

   //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify

  
endmodule
`endcelldefine


`celldefine
module HPDWUW0608DGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

 //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify


endmodule
`endcelldefine


`celldefine
module HPDWUW0608SDGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

 //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify


endmodule
`endcelldefine


`celldefine
module HPDWUW1012DGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

//  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify


endmodule
`endcelldefine


`celldefine
module HPDWUW1012SDGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

 //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify


endmodule
`endcelldefine


`celldefine
module HPDWUW1416DGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

  //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify


endmodule
`endcelldefine


`celldefine
module HPDWUW1416SDGP( PAD, I, OE, DS, IE, C, PE, PS);
input DS, I, IE, OE, PE, PS;
inout PAD;
output C;

 //  functional //

	supply1 my1;
	
	supply0 my0;

	and MGM_BG_0( C, IE, PAD );

	wire MGM_WB_0;

	wire MGM_WB_1;

	and MGM_BG_1( MGM_WB_0, I, OE );

	not MGM_BG_2( MGM_WB_1, OE );

	bufif0 MGM_BG_3( PAD_BUF, MGM_WB_0,MGM_WB_1 );
	
	and (PU_BUF, PE, PS );

	not (PS_NO, PS );

	and (PD_BUF,PE, PS_NO);

	rnmos (PAD_BUF, 1'b1, PU_BUF );

	rnmos (PAD_BUF, 1'b0, PD_BUF );

	pmos (PAD, PAD_BUF, my0 );


	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc IE --> C
	 (IE => C) = (1.0,1.0);

	// comb arc PAD --> C
	 (PAD => C) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b0)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b1 && PE===1'b1 && PS===1'b1)
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	ifnone
	// comb arc I --> PAD
	 (I => PAD) = (1.0,1.0);

	if(DS===1'b0)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	if(DS===1'b1)
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	ifnone
	// comb arc OE --> PAD
	 (OE => PAD) = (1.0,1.0);

	// specify_block_end 

   endspecify


endmodule
`endcelldefine


`celldefine
module HPMAC1ANA( PAD );
inout PAD;
endmodule
`endcelldefine


`celldefine
module HPMAC1CLAMP( );
endmodule
`endcelldefine


`celldefine
module HPMAC2ANA( PAD );
inout PAD;
endmodule
`endcelldefine


`celldefine
module HPMAC2CLAMP( );
endmodule
`endcelldefine


`celldefine
module HPMAC2PFC( );

endmodule
`endcelldefine


`celldefine
module HPVCCA( );
endmodule
`endcelldefine


`celldefine
module HPVCCAC( );

endmodule
`endcelldefine


`celldefine
module HPVCCIA( );
endmodule
`endcelldefine


`celldefine
module HPVCCIAC( );
endmodule
`endcelldefine


`celldefine
module HPVDD1DGP( );

endmodule
`endcelldefine


`celldefine
module HPVDD2ANA( PAD);
inout PAD;
endmodule
`endcelldefine


`celldefine
module HPVDD2DGP( );

endmodule
`endcelldefine


`celldefine
module HPVSS( );

endmodule
`endcelldefine


`celldefine
module HPVSS1DGP( );
endmodule
`endcelldefine


`celldefine
module HPVSS2DGP( );
endmodule
`endcelldefine


`celldefine
module HPVSS3ANA( );
endmodule
`endcelldefine


`celldefine
module HPVSS3DGP( );
endmodule
`endcelldefine


`celldefine
module HPVSSA( );
endmodule
`endcelldefine


`celldefine
module HPVSSAC( );
endmodule
`endcelldefine


`celldefine
module HPVSSC( );
endmodule
`endcelldefine


`celldefine
module HPVSSIA( );
endmodule
`endcelldefine


`celldefine
module HPVSSIAC( );
endmodule
`endcelldefine



